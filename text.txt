void parcourir(unsigned int source) {
        std::vector<std::pair<unsigned int, unsigned int>> heap(n);
        std::vector<unsigned int> S(n, 0);

        for (unsigned int i = 0; i < n; ++i) {
            distance[i][0] = UINT_MAX;
            distance[i][1] = UINT_MAX;
            heap[i] = {UINT_MAX, i};
        }

        distance[source][0] = 0;
        heap[source].first = 0;

        unsigned int heapSize = n;
        buildMinHeap(heap, heapSize);

        while (heapSize > 0) {
            unsigned int u = UINT_MAX;
            unsigned int minVal = heapExtractMin(heap, heapSize, u);

            if (u == UINT_MAX) {
                break;
            }
            S[u] = 1;

            for (unsigned int v = 0; v < n; ++v) {
                if (adj_matrix[u][v] != UINT_MAX && !S[v]) {
                    relax(heap, u, v, adj_matrix[u][v], heapSize);
                }
            }
        }
    }
